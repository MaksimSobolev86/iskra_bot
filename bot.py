import os
import json
import re
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

import gspread

# --- Google Sheets: –∞–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è Render ---
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON")
if GOOGLE_CREDS_JSON:
    from oauth2client.service_account import ServiceAccountCredentials
    creds_dict = json.loads(GOOGLE_CREDS_JSON)
    scope = [
        'https://spreadsheets.google.com/feeds',
        'https://www.googleapis.com/auth/drive'
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    gc = gspread.authorize(creds)
else:
    gc = gspread.service_account(filename=os.getenv("GOOGLE_SHEETS_KEY"))

spreadsheet = gc.open("besedka_booking")
huts_sheet = spreadsheet.worksheet("huts")
bookings_sheet = spreadsheet.worksheet("bookings")

# --- FSM (—Å–æ—Å—Ç–æ—è–Ω–∏—è) ---
class BookingState(StatesGroup):
    hut = State()
    date = State()
    time = State()
    name = State()
    phone = State()
    payment = State()

# --- –ë–æ—Ç ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USER_ID = 408892234  # –¢–≤–æ–π id –¥–ª—è —á–µ–∫–∞

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# --- –ö–Ω–æ–ø–∫–∏ ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–µ–¥–∫—É")],
    [KeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–µ—Å–µ–¥–∫–∏")],
    [KeyboardButton(text="‚òéÔ∏è –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")]
])

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(F.text.lower() == "/start")
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã –±–µ—Å–µ–¥–æ–∫ üåø\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=main_kb
    )

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –±–µ—Å–µ–¥–æ–∫ ---
@dp.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–µ—Å–µ–¥–∫–∏")
async def show_huts(message: Message):
    huts = huts_sheet.get_all_records()
    for hut in huts:
        text = (
            f"<b>{hut['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {hut['–¶–µ–Ω–∞']}‚ÇΩ/—á–∞—Å\n"
            f"üìÑ {hut['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
        )
        if hut.get('–§–æ—Ç–æ'):
            await message.answer_photo(hut['–§–æ—Ç–æ'], caption=text, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")

# --- –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ---
@dp.message(F.text == "‚òéÔ∏è –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
async def call_admin(message: Message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –∑–≤–æ–Ω–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    phone = "+79991234567"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∑–≤–æ–Ω–∏—Ç—å üìû", url=f"tel:{phone}")]
        ]
    )
    await message.answer(
        f"–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: <code>{phone}</code>",
        reply_markup=kb,
        parse_mode="HTML"
    )

# --- –ù–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---
@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–µ—Å–µ–¥–∫—É")
async def choose_hut(message: Message, state: FSMContext):
    huts = huts_sheet.get_all_records()
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=hut['–ù–∞–∑–≤–∞–Ω–∏–µ'], callback_data=f"hut_{idx}")]
            for idx, hut in enumerate(huts)
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–µ—Å–µ–¥–∫—É:", reply_markup=kb)
    await state.set_state(BookingState.hut)

# --- –í—ã–±–æ—Ä –±–µ—Å–µ–¥–∫–∏ ---
@dp.callback_query(lambda c: c.data and c.data.startswith("hut_"))
async def hut_chosen(callback: CallbackQuery, state: FSMContext):
    idx = int(callback.data.split("_")[1])
    huts = huts_sheet.get_all_records()
    hut = huts[idx]
    await state.update_data(hut=hut)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):")
    await state.set_state(BookingState.date)

await callback.answer()

# --- –í—ã–±–æ—Ä –¥–∞—Ç—ã ---
@dp.message(BookingState.date)
async def date_entered(message: Message, state: FSMContext):
    text = message.text.strip()
    if not re.match(r"\d{2}\.\d{2}\.\d{4}", text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥.")
        return
    await state.update_data(date=text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12:00‚Äì17:00):")
    await state.set_state(BookingState.time)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ ---
@dp.message(BookingState.time)
async def time_entered(message: Message, state: FSMContext):
    time_pattern = r"(\d{1,2}:\d{2})\s*[-‚Äì]\s*(\d{1,2}:\d{2})"
    m = re.match(time_pattern, message.text.strip().replace('‚Äî', '-').replace('‚Äì', '-'))
    if not m:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 12:00‚Äì17:00")
        return

    time_from, time_to = m.group(1), m.group(2)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    h_from, m_from = map(int, time_from.split(":"))
    h_to, m_to = map(int, time_to.split(":"))
    total_minutes = (h_to * 60 + m_to) - (h_from * 60 + m_from)
    if total_minutes < 120:
        await message.answer("‚è≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî 2 —á–∞—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
    data = await state.get_data()
    hut = data["hut"]
    date = data["date"]

    bookings = bookings_sheet.get_all_records()
    for booking in bookings:
        if booking['–ë–µ—Å–µ–¥–∫–∞'] == hut['–ù–∞–∑–≤–∞–Ω–∏–µ'] and booking['–¥–∞—Ç–∞'] == date:
            booked_from = booking['–≤—Ä–µ–º—è –æ—Ç'].replace(" ", "")
            booked_to = booking['–≤—Ä–µ–º—è –¥–æ'].replace(" ", "")
            bf_h, bf_m = map(int, booked_from.split(":"))
            bt_h, bt_m = map(int, booked_to.split(":"))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if not ((h_to * 60 + m_to) <= (bf_h * 60 + bf_m) or (h_from * 60 + m_from) >= (bt_h * 60 + bt_m)):
                busy = f"{booked_from}‚Äì{booked_to}"
                await message.answer(
                    f"‚ùó –≠—Ç–∞ –±–µ—Å–µ–¥–∫–∞ –∑–∞–Ω—è—Ç–∞ –Ω–∞ {date} —Å {busy}.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É!"
                )
                return

    await state.update_data(time_from=time_from, time_to=time_to)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(BookingState.name)

# --- –ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω ---
@dp.message(BookingState.name)
async def name_entered(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(BookingState.phone)

@dp.message(BookingState.phone)
async def phone_entered(message: Message, state: FSMContext):
    phone = message.text.strip()
    await state.update_data(phone=phone)
    data = await state.get_data()

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    price = int(data["hut"]["–¶–µ–Ω–∞"])
    h_from, m_from = map(int, data["time_from"].split(":"))
    h_to, m_to = map(int, data["time_to"].split(":"))
    delta = (h_to * 60 + m_to) - (h_from * 60 + m_from)
    hours = delta // 60
    minutes = delta % 60
    if minutes > 30:
        hours += 1
    elif minutes > 0:
        hours += 0.5
    if hours < 2:
        await message.answer("‚è≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî 2 —á–∞—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:")
        await state.set_state(BookingState.time)
        return
    total_cost = int(price * hours)

    # –í—Å—Ç–∞–≤–∫–∞ –±—Ä–æ–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    bookings_sheet.append_row([
        data["hut"]["–ù–∞–∑–≤–∞–Ω–∏–µ"],
        data["date"],
        data["time_from"],
        data["time_to"],
        data["name"],
        phone,
        "–æ–∂–∏–¥–∞–µ—Ç"
    ])

    pay_info = (
        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è <b>{data['hut']['–ù–∞–∑–≤–∞–Ω–∏–µ']}</b> –Ω–∞ {data['date']} —Å {data['time_from']} –¥–æ {data['time_to']}.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {price}‚ÇΩ/—á–∞—Å √ó {hours} —á = <b>{total_cost}‚ÇΩ</b>\n\n"
        f"üîó <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>: <code>2202202202202202</code> (–°–±–µ—Ä–±–∞–Ω–∫)\n"
        f"–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: –§–ò–û –∏ –¥–∞—Ç—É –±—Ä–æ–Ω–∏.\n\n"

"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await message.answer(pay_info, parse_mode="HTML")
    await state.set_state(BookingState.payment)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ ---
import random
@dp.message(BookingState.payment, F.photo)
async def process_check(message: Message, state: FSMContext):
    data = await state.get_data()
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —á–µ–∫ –∞–¥–º–∏–Ω—É
    name = data.get("name", "–≥–æ—Å—Ç—å")
    random_replies = [
        f"–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ, {name}, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å. –•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â—ë!",
        f"–ß–µ–∫ –Ω–∞ –º–µ—Å—Ç–µ! {name}, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –∏ —Å–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
        f"–û—Ç–ª–∏—á–Ω–æ, {name}! –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –∂–¥—ë–º –≤–∞—Å –∏ –∂–µ–ª–∞–µ–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!"
    ]
    await bot.send_photo(
        ADMIN_USER_ID,
        message.photo[-1].file_id,
        caption=(
            f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å!\n"
            f"–ò–º—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: <code>{data.get('phone','')}</code>\n"
            f"–ë–µ—Å–µ–¥–∫–∞: {data.get('hut',{}).get('–ù–∞–∑–≤–∞–Ω–∏–µ','')}\n"
            f"–î–∞—Ç–∞: {data.get('date','')}\n"
            f"–í—Ä–µ–º—è: {data.get('time_from','')}-{data.get('time_to','')}\n"
        ),
        parse_mode="HTML"
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
    bookings = bookings_sheet.get_all_records()
    for idx, row in enumerate(bookings, start=2):
        if (
            row["–ë–µ—Å–µ–¥–∫–∞"] == data["hut"]["–ù–∞–∑–≤–∞–Ω–∏–µ"] and
            row["–¥–∞—Ç–∞"] == data["date"] and
            row["–≤—Ä–µ–º—è –æ—Ç"] == data["time_from"] and
            row["–≤—Ä–µ–º—è –¥–æ"] == data["time_to"] and
            row["–∏–º—è"] == name
        ):
            bookings_sheet.update_cell(idx, 7, "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ")
            break
    await message.answer(random.choice(random_replies))
    await state.clear()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç...")
    await dp.start_polling(bot)

if name == "__main__":
    asyncio.run(main())
